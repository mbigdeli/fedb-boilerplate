version: '3.8'

services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    env_file:
      - .env
      - ./backend/.env
    volumes:
      - ./backend:/opt/app
      - /opt/app/node_modules
    depends_on:
      - postgres
    networks:
      - app-network
    environment:
      - NODE_ENV=development
      - NPM_CONFIG_CACHE=/opt/app/.npm
      - CHOKIDAR_USEPOLLING=true
      - NODEMON_LEGACY_WATCH=true
      - WATCHPACK_POLLING=true

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    env_file:
      - .env
      - ./frontend/.env
    volumes:
      - ./frontend:/opt/app
      - /opt/app/node_modules
      - /opt/app/dist
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    networks:
      - app-network

  postgres:
    image: postgres:16-alpine
    env_file:
      - .env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - app-network

  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data: 